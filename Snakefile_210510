MAX_THREADS = 32
N_BENCHMARKS = 1

SAMPLES=[
#"Oaustraliensis-300131-flowcell-1-SQK-LSK109",
#"Oaustraliensis-300134-flowcell1-SQK-LSK109",
#"Oaustraliensis-300137-flowcell1-SQK-LSK109",
#"Oaustraliensis_keepriver_1g_SQK-LSK109",
#"Oaustraliensis-keepriver-flowcell-2-SQK-LSK109",
#"Oaustraliensis-keepriver-flowcell-3-SQK-LSK109",
#"Omeridionalis-BH-flowcell-1-SQK-LSK109",
#"Osativa_Java_30g_SQK-LSK109",
#"Oaustraliensis_keepriver_flowcell1-2-3",
"Plantago_pacbio"
]

singularity:
        "docker://continuumio/miniconda3:4.5.12"
#include:
#        "rules/misc.smk",

#localrules:
#	all,

rule all:
	input:
		expand("working_raw_base_calls/{sample}_guppy303_all.fastq.gz",
			sample=SAMPLES,
			),
		expand("chloro_assembly/reference/{sample}_circular_chloro_reference.fasta",
			sample=SAMPLES,
			),
		expand("chloro_assembly/{sample}_chloro_mapped_reads.sam",
			sample=SAMPLES,
			),
		expand("chloro_assembly/{sample}_chloro_only_mapped_reads.sam",
			sample=SAMPLES,
			),
		expand("chloro_assembly/{sample}_chloro_read_names.txt",
			sample=SAMPLES,
			),
		expand("chloro_assembly/{sample}_unique_chloro_read_names.txt",
			sample=SAMPLES,
			),
		expand("chloro_assembly/{sample}_chloro_reads.fastq",
			sample=SAMPLES,
			),
		expand("chloro_assembly/cov-{cov}_asm-{asm}_ovlp-{overlap}/{sample}_flye_assembly/assembly.fasta",
			cov=["70","100","300"],
			asm=["50","100","300"],
			overlap=["5000","10000"],
			sample=SAMPLES,
			),

rule fastq_to_gz:
	input:
		"backup/{prefix}/{prefix}_guppy303_all.fastq"
	output:
		"working_raw_base_calls/{prefix}_guppy303_all.fastq.gz"
	conda:
                "envs/default.yml"
	threads:
		MAX_THREADS
	shell:
		"""
		pigz --stdout --best --processes {threads} {input} > {output}
		"""

#replaces the porechop removal of adapters as it is faster to just trim the first and last 200bp from reads than to use Porechop to do the same thing 
rule quality_filtering:
#	input:
#		"nanolysed/{prefix}.fastq.gz"
#	output:
#		"filtered/{prefix}_trimmed_filtered.fastq.gz",
#	conda:
#		"envs/nanofilt.yml"
#	shell:
#		"""
#		gunzip -c {input} | NanoFilt --quality 7 --length 1000 --headcrop 200 --tailcrop 200 | gzip > {output}
#		"""

###Subsampling plastid reads for plastid genome (chloro and mito) assembly - even though the rules are about "chloro" it will do both
#PLASTIDTABLE was made by concatenating the chloroplast or mito genomes of 22 and 4 rice species, respectively - done on the head node
#genomes were added in twice to allow mapping of reads that span the break-point in the circular genomes 
#map long reads to chloroplast reference genome

#need to have Biopython installed for NCBI download to work
from snakemake.remote.NCBI import RemoteProvider as NCBIRemoteProvider
NCBI = NCBIRemoteProvider(email="aaron.phillips@adelaide.edu.au") # email required by NCBI to prevent abuse
rule download_chloro_genome:
        input:
                NCBI.remote("NC_041421.1.fasta", db="nuccore")
        output:
                "chloro_assembly/reference/{prefix}_circular_chloro_reference.fasta"
        shell:
                """
                cat {input} > chloro_assembly/reference/{wildcards.prefix}_reference_chloroplast_genomes.fasta
                touch {output}
                for j in chloro_assembly/reference/{wildcards.prefix}_reference_chloroplast_genomes.fasta
                do
                        echo ${{j}}
                        grep '^>' ${{j}} >> {output}
                        grep -v '^>' ${{j}} > temp
                        tr -d '\\n' < temp > temp2
                        cat temp2 >> {output}
                        cat temp2 >> {output}
                        sed -i -e '$a\\\' {output}
                done
                """

rule minimap2_plastid:
	input:
		PLASTIDTABLE = "chloro_assembly/reference/{prefix}_circular_chloro_reference.fasta",
		QC_FASTQ = "working_raw_base_calls/{prefix}_guppy303_all.fastq.gz",
	output:
		"chloro_assembly/{prefix}_chloro_mapped_reads.sam",
	conda:
		"envs/mapping_reads.yml"
	shell:
		"""
		minimap2 -ax map-pb {input.PLASTIDTABLE} {input.QC_FASTQ} > {output}
		"""

#extract reads that map to chloro
rule samtools_minimap2_plastid:
	input:
		"chloro_assembly/{prefix}_chloro_mapped_reads.sam"
	output:
		"chloro_assembly/{prefix}_chloro_only_mapped_reads.sam"
	conda:
		"envs/mapping_reads.yml"
	shell:
		"""
		samtools view -F 4 {input} > {output}
		"""

#get chloro read names
rule extract_plastid_read_names:
	input:
		"chloro_assembly/{prefix}_chloro_only_mapped_reads.sam"
	output:
		"chloro_assembly/{prefix}_chloro_read_names.txt",
	conda:
		"envs/mapping_reads.yml"
	shell:
		"""
		awk '{{print $1}}' {input} > {output}
		"""

#generates list of unique read names that map to plastid (chloro and/or mito genomes)
rule sort_unique_mapped_read_names:
	input:
		"chloro_assembly/{prefix}_chloro_read_names.txt"
	output:
		"chloro_assembly/{prefix}_unique_chloro_read_names.txt"
	conda:
		"envs/default.yml"
	shell:
		"""
		sort {input} | uniq > {output}
		"""

rule pull_unique_reads:
	input:
		QC_FASTQ2 = "working_raw_base_calls/Plantago_pacbio_guppy303_all.fastq.gz",
		UNIQUE_CHLORO_READS = "chloro_assembly/{prefix}_unique_chloro_read_names.txt"
	output:
		"chloro_assembly/{prefix}_chloro_reads.fastq"
	conda:
		"envs/mapping_reads.yml"
	shell:
		"""
		seqtk subseq {input.QC_FASTQ2} {input.UNIQUE_CHLORO_READS} > {output}
		"""

#need to subset reads, otherwise the mem requirements of Flye are too huge (when cov is in 10's of thousands with raw reads)
rule subset_reads_for_x_coverage:
	input:
		"chloro_assembly/{prefix}_chloro_reads.fastq",
	output:
		"chloro_assembly/{prefix}_chloro_reads_subsampled_{cov}x_cov.fastq",
	conda:
		"envs/subset_reads_for_x_coverage.yml"
	params:
		genome_size="150kb",  # required
	shell:
		"""
		rasusa --input {input} --output {output} --coverage {wildcards.cov} --genome-size {params.genome_size}
		"""

rule raw_flye_chloro_assembly:
	input:
		"chloro_assembly/{prefix}_chloro_reads_subsampled_{cov}x_cov.fastq"
	output:
		"chloro_assembly/cov-{cov}_asm-{asm}_ovlp-{overlap}/{prefix}_flye_assembly/assembly.fasta"
	conda:
		"envs/genome_assembly.yml"
	params:
		genome_size="150k", #required
		outdir = "chloro_assembly/raw_reads/cov-{cov}_asm-{asm}_ovlp-{overlap}/{prefix}_flye_assembly"
	shell:
		"""
		flye --pacbio-raw {input} --asm-coverage {wildcards.asm} --min-overlap {wildcards.overlap} --out-dir {params.outdir} --genome-size {params.genome_size}  --threads 20
		"""

##check quality of chloroplast assembly:
#BUSCO
#LAI
